package io.github.k8soperators.microservicebootstrapoperator.service;

import io.fabric8.kubernetes.api.model.ObjectMeta;
import io.fabric8.kubernetes.api.model.Secret;
import io.fabric8.kubernetes.api.model.SecretBuilder;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.dsl.MixedOperation;
import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;
import io.fabric8.kubernetes.client.dsl.Resource;
import io.github.k8soperators.microservicebootstrapoperator.model.AppConfig;
import io.github.k8soperators.microservicebootstrapoperator.model.AppConfigSpec;
import io.github.k8soperators.microservicebootstrapoperator.model.SecretRotationConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * Unit tests for SecretRotationService
 * Updated for Java 22 compatibility
 */
@ExtendWith(MockitoExtension.class)
public class SecretRotationServiceTest {

    @Mock
    private KubernetesClient kubernetesClient;

    @Mock
    private MixedOperation<Secret, io.fabric8.kubernetes.api.model.SecretList, Resource<Secret>> secretClient;

    @Mock
    private NonNamespaceOperation<Secret, io.fabric8.kubernetes.api.model.SecretList, Resource<Secret>> namespaceSecretClient;

    @Mock
    private Resource<Secret> secretResource;

    private SecretRotationService secretRotationService;

    @BeforeEach
    void setUp() {
        secretRotationService = new SecretRotationService(kubernetesClient);
        
        // Mock the Kubernetes client chain
        when(kubernetesClient.secrets()).thenReturn(secretClient);
        when(secretClient.inNamespace(anyString())).thenReturn(namespaceSecretClient);
        when(namespaceSecretClient.withName(anyString())).thenReturn(secretResource);
        
        // Mock the resource() method to fix the NullPointerException
        when(namespaceSecretClient.resource(any(Secret.class))).thenReturn(secretResource);
        
        // Make all stubs lenient to avoid unnecessary stubbing exceptions
        lenient().when(secretResource.get()).thenReturn(null);
        lenient().when(secretResource.create()).thenReturn(null);
        lenient().when(secretResource.replace()).thenReturn(null);
    }

    @Test
    void testRotateSecretsWithDefaultStrategy() {
        // Create test AppConfig with default strategy
        AppConfig appConfig = createAppConfig("default", null);
        
        // Mock the secret resource
        when(secretResource.get()).thenReturn(null); // Secret doesn't exist yet
        
        // Call the service method
        secretRotationService.rotateSecrets(appConfig);
        
        // Verify that create was called with a Secret containing the expected data
        ArgumentCaptor<Secret> secretCaptor = ArgumentCaptor.forClass(Secret.class);
        verify(namespaceSecretClient).resource(secretCaptor.capture());
        verify(secretResource).create();
        
        // Verify the captured Secret
        Secret capturedSecret = secretCaptor.getValue();
        assertEquals("test-namespace", capturedSecret.getMetadata().getNamespace());
        assertEquals("test-app-secrets", capturedSecret.getMetadata().getName());
        
        // Verify the secret data contains username and password
        Map<String, String> stringData = capturedSecret.getStringData();
        assertNotNull(stringData.get("username"));
        assertNotNull(stringData.get("password"));
        assertTrue(stringData.get("password").length() >= 16, "Password should be at least 16 characters");
        
        // Verify metadata
        assertNotNull(capturedSecret.getMetadata().getAnnotations());
        assertTrue(capturedSecret.getMetadata().getAnnotations().containsKey("rotation-timestamp"));
    }

    @Test
    void testRotateSecretsWithDatabaseStrategy() {
        // Setup
        Map<String, String> strategyConfig = new HashMap<>();
        strategyConfig.put("dbType", "postgresql");
        AppConfig appConfig = createAppConfig("database", strategyConfig);
        
        // Mock existing secret
        Secret existingSecret = new SecretBuilder()
                .withNewMetadata()
                .withName("db-secret")
                .withNamespace("test-namespace")
                .endMetadata()
                .withData(new HashMap<>())
                .build();
        
        when(secretResource.get()).thenReturn(existingSecret);
        // Use lenient stubbing to avoid unnecessary stubbing exception
        lenient().when(secretResource.replace()).thenReturn(existingSecret);
        
        try {
            // Execute
            secretRotationService.rotateSecrets(appConfig);
            
            // Verify - since we mocked an existing secret, replace() should be called
            ArgumentCaptor<Secret> secretCaptor = ArgumentCaptor.forClass(Secret.class);
            verify(secretResource).replace();
            verify(namespaceSecretClient).resource(secretCaptor.capture());
            
            Secret capturedSecret = secretCaptor.getValue();
            assertNotNull(capturedSecret.getStringData());
            assertTrue(capturedSecret.getStringData().containsKey("db-username"));
            assertTrue(capturedSecret.getStringData().containsKey("db-password"));
            assertTrue(capturedSecret.getStringData().containsKey("db-url"));
            
            // Verify metadata
            assertNotNull(capturedSecret.getMetadata().getAnnotations());
            assertTrue(capturedSecret.getMetadata().getAnnotations().containsKey("rotation-timestamp"));
        } catch (Exception e) {
            fail("Should not throw exception: " + e.getMessage());
        }
    }

    @Test
    void testRotateSecretsWithApiKeyStrategy() {
        // Setup
        Map<String, String> strategyConfig = new HashMap<>();
        strategyConfig.put("keyLength", "32");
        AppConfig appConfig = createAppConfig("api-key", strategyConfig);
        
        // Mock existing secret
        Secret existingSecret = new SecretBuilder()
                .withNewMetadata()
                .withName("api-secret")
                .withNamespace("test-namespace")
                .endMetadata()
                .withData(new HashMap<>())
                .build();
        
        when(secretResource.get()).thenReturn(existingSecret);
        // Use lenient stubbing to avoid unnecessary stubbing exception
        lenient().when(secretResource.replace()).thenReturn(existingSecret);
        
        try {
            // Execute
            secretRotationService.rotateSecrets(appConfig);
            
            // Verify
            ArgumentCaptor<Secret> secretCaptor = ArgumentCaptor.forClass(Secret.class);
            verify(secretResource).replace();
            verify(namespaceSecretClient).resource(secretCaptor.capture());
            
            Secret capturedSecret = secretCaptor.getValue();
            assertNotNull(capturedSecret.getStringData());
            assertTrue(capturedSecret.getStringData().containsKey("api-key"));
            assertTrue(capturedSecret.getStringData().containsKey("api-secret"));
            
            // Verify metadata
            assertNotNull(capturedSecret.getMetadata().getAnnotations());
            assertTrue(capturedSecret.getMetadata().getAnnotations().containsKey("rotation-timestamp"));
        } catch (Exception e) {
            fail("Should not throw exception: " + e.getMessage());
        }
    }

    @Test
    void testRotateSecretsWithTlsStrategy() {
        // Setup
        Map<String, String> strategyConfig = new HashMap<>();
        strategyConfig.put("commonName", "example.com");
        AppConfig appConfig = createAppConfig("tls", strategyConfig);
        
        // Mock existing secret
        Secret existingSecret = new SecretBuilder()
                .withNewMetadata()
                .withName("tls-secret")
                .withNamespace("test-namespace")
                .endMetadata()
                .withData(new HashMap<>())
                .build();
        
        when(secretResource.get()).thenReturn(existingSecret);
        // Use lenient stubbing to avoid unnecessary stubbing exception
        lenient().when(secretResource.replace()).thenReturn(existingSecret);
        
        try {
            // Execute
            secretRotationService.rotateSecrets(appConfig);
            
            // Verify
            ArgumentCaptor<Secret> secretCaptor = ArgumentCaptor.forClass(Secret.class);
            verify(secretResource).replace();
            verify(namespaceSecretClient).resource(secretCaptor.capture());
            
            Secret capturedSecret = secretCaptor.getValue();
            assertNotNull(capturedSecret.getStringData());
            assertTrue(capturedSecret.getStringData().containsKey("tls.crt"));
            assertTrue(capturedSecret.getStringData().containsKey("tls.key"));
            
            // Verify metadata
            assertNotNull(capturedSecret.getMetadata().getAnnotations());
            assertTrue(capturedSecret.getMetadata().getAnnotations().containsKey("rotation-timestamp"));
        } catch (Exception e) {
            fail("Should not throw exception: " + e.getMessage());
        }
    }

    @Test
    void testRotateSecretsWithNonExistentSecret() {
        // Setup
        AppConfig appConfig = createAppConfig("default", null);
        
        // Mock non-existent secret
        when(secretResource.get()).thenReturn(null);
        
        try {
            // Execute
            secretRotationService.rotateSecrets(appConfig);
            
            // Verify that create was called
            ArgumentCaptor<Secret> secretCaptor = ArgumentCaptor.forClass(Secret.class);
            verify(secretResource).create();
            verify(namespaceSecretClient).resource(secretCaptor.capture());
            
            Secret capturedSecret = secretCaptor.getValue();
            assertNotNull(capturedSecret.getStringData());
            assertTrue(capturedSecret.getStringData().containsKey("username"));
            assertTrue(capturedSecret.getStringData().containsKey("password"));
        } catch (Exception e) {
            fail("Should not throw exception: " + e.getMessage());
        }
    }
    
    @Test
    void testRotateSecretsWithRetryOnFailure() {
        // Setup
        AppConfig appConfig = createAppConfig("default", null);
        
        // Mock existing secret
        Secret existingSecret = new SecretBuilder()
                .withNewMetadata()
                .withName("test-secret")
                .withNamespace("test-namespace")
                .endMetadata()
                .withData(new HashMap<>())
                .build();
        
        when(secretResource.get()).thenReturn(existingSecret);
        
        // For non-void methods like replace(), we need to use when().thenThrow().thenReturn()
        when(secretResource.replace())
            .thenThrow(new RuntimeException("API server error"))
            .thenReturn(existingSecret);
        
        try {
            // Execute - should succeed after retry
            secretRotationService.rotateSecrets(appConfig);
            
            // If we get here without exception, the test passes
            
            // Verify that replace was called twice (once for the failure, once for the retry)
            verify(secretResource, times(2)).replace();
            verify(namespaceSecretClient, times(2)).resource(any(Secret.class));
        } catch (Exception e) {
            fail("Should not throw exception: " + e.getMessage());
        }
    }

    // Helper method to create AppConfig with specific rotation strategy
    private AppConfig createAppConfig(String strategy, Map<String, String> strategyConfig) {
        AppConfig appConfig = new AppConfig();
        AppConfigSpec spec = new AppConfigSpec();
        SecretRotationConfig secretRotation = new SecretRotationConfig();
        
        secretRotation.setEnabled(true);
        secretRotation.setIntervalHours(24);
        secretRotation.setSources(List.of("test-source")); // Using List.of instead of Arrays.asList for Java 22
        secretRotation.setStrategy(strategy);
        secretRotation.setStrategyConfig(strategyConfig);
        
        spec.setAppName("test-app");
        spec.setSecretRotation(secretRotation);
        appConfig.setSpec(spec);
        
        ObjectMeta metadata = new ObjectMeta();
        metadata.setName("test-app-config");
        metadata.setNamespace("test-namespace");
        appConfig.setMetadata(metadata);
        
        return appConfig;
    }
}
